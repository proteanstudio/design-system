{"version":3,"sources":["webpack:///../node_modules/core-js/modules/es.regexp.constructor.js","webpack:///../node_modules/core-js/modules/es.string.trim-end.js","webpack:///../node_modules/core-js/modules/es.string.match.js","webpack:///../protean-elements/dist/esm/shadow-css-fe2fbf58.js"],"names":["DESCRIPTORS","global","isForced","inheritIfRequired","defineProperty","f","getOwnPropertyNames","isRegExp","getFlags","stickyHelpers","redefine","fails","setInternalState","set","setSpecies","wellKnownSymbol","MATCH","NativeRegExp","RegExp","RegExpPrototype","prototype","re1","re2","CORRECT_NEW","UNSUPPORTED_Y","FORCED","RegExpWrapper","pattern","flags","sticky","thisIsRegExp","this","patternIsRegExp","flagsAreUndefined","undefined","constructor","source","call","indexOf","replace","result","proxy","key","configurable","get","it","keys","index","length","$","$trimEnd","end","forcedStringTrimMethod","trimEnd","target","proto","forced","trimRight","fixRegExpWellKnownSymbolLogic","anObject","toLength","requireObjectCoercible","advanceStringIndex","regExpExec","nativeMatch","maybeCallNative","regexp","O","matcher","String","res","done","value","rx","S","fullUnicode","unicode","lastIndex","A","n","matchStr","safeSelector","selector","content","placeholders","_","keep","replaceBy","push","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","suffix","contentPrefix","startsWith","blocks","substring","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","applySimpleSelectorScope","hostSelector","before","colon","after","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","matches","safeContent","scopedSelector","startIndex","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"mappings":"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","file":"js/chunk-004f79c5.ed69a54e.js","sourcesContent":["var DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar defineProperty = require('../internals/object-define-property').f;\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar isRegExp = require('../internals/is-regexp');\nvar getFlags = require('../internals/regexp-flags');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar setInternalState = require('../internals/internal-state').set;\nvar setSpecies = require('../internals/set-species');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\nvar NativeRegExp = global.RegExp;\nvar RegExpPrototype = NativeRegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n\n// \"new\" should create a new object, old webkit bug\nvar CORRECT_NEW = new NativeRegExp(re1) !== re1;\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\n\nvar FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {\n  re2[MATCH] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';\n})));\n\n// `RegExp` constructor\n// https://tc39.es/ecma262/#sec-regexp-constructor\nif (FORCED) {\n  var RegExpWrapper = function RegExp(pattern, flags) {\n    var thisIsRegExp = this instanceof RegExpWrapper;\n    var patternIsRegExp = isRegExp(pattern);\n    var flagsAreUndefined = flags === undefined;\n    var sticky;\n\n    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {\n      return pattern;\n    }\n\n    if (CORRECT_NEW) {\n      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;\n    } else if (pattern instanceof RegExpWrapper) {\n      if (flagsAreUndefined) flags = getFlags.call(pattern);\n      pattern = pattern.source;\n    }\n\n    if (UNSUPPORTED_Y) {\n      sticky = !!flags && flags.indexOf('y') > -1;\n      if (sticky) flags = flags.replace(/y/g, '');\n    }\n\n    var result = inheritIfRequired(\n      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),\n      thisIsRegExp ? this : RegExpPrototype,\n      RegExpWrapper\n    );\n\n    if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });\n\n    return result;\n  };\n  var proxy = function (key) {\n    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {\n      configurable: true,\n      get: function () { return NativeRegExp[key]; },\n      set: function (it) { NativeRegExp[key] = it; }\n    });\n  };\n  var keys = getOwnPropertyNames(NativeRegExp);\n  var index = 0;\n  while (keys.length > index) proxy(keys[index++]);\n  RegExpPrototype.constructor = RegExpWrapper;\n  RegExpWrapper.prototype = RegExpPrototype;\n  redefine(global, 'RegExp', RegExpWrapper);\n}\n\n// https://tc39.es/ecma262/#sec-get-regexp-@@species\nsetSpecies('RegExp');\n","'use strict';\nvar $ = require('../internals/export');\nvar $trimEnd = require('../internals/string-trim').end;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\nvar FORCED = forcedStringTrimMethod('trimEnd');\n\nvar trimEnd = FORCED ? function trimEnd() {\n  return $trimEnd(this);\n} : ''.trimEnd;\n\n// `String.prototype.{ trimEnd, trimRight }` methods\n// https://tc39.es/ecma262/#sec-string.prototype.trimend\n// https://tc39.es/ecma262/#String.prototype.trimright\n$({ target: 'String', proto: true, forced: FORCED }, {\n  trimEnd: trimEnd,\n  trimRight: trimEnd\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toLength = require('../internals/to-length');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.es/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","/*\n Stencil Client Platform v2.3.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map(shallowPart => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, rule => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(slottedSelector => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"sourceRoot":""}