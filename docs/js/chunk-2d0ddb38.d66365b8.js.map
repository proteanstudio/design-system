{"version":3,"sources":["webpack:///../protean-elements/dist/esm/protean-message.entry.js"],"names":["stylesCss","ProteanMessage","hostRef","registerInstance","this","h","class","computedType","role","isInline","type","icon","renderDecorator","cssClass","xmlns","viewBox","d","messageTypeMap","info","success","warning","error","level","variant","style"],"mappings":"+MAEMA,EAAY,o4DAEZC,EAAc,WAClB,WAAYC,GAAS,uBACnBC,eAAiBC,KAAMF,GAFP,wDAuBhB,OAAQG,eAAE,MAAO,CAAEC,MAAO,qBAAF,OAAuBF,KAAKG,cAAgBC,KAAMJ,KAAKI,OAASJ,KAAKK,UAAaJ,eAAE,eAAgB,CAAEK,KAAMN,KAAKO,OAAUP,KAAKQ,gBAAgB,OAAQP,eAAE,OAAQ,MAAOD,KAAKQ,gBAAgB,aAvBtM,sCAyBFC,GACd,OAAQR,eAAE,MAAO,CAAEC,MAAO,aAAF,OAAeO,GAAYC,MAAO,6BAA8BC,QAAS,cAAe,cAAe,QAAUV,eAAE,OAAQ,CAAEW,EAAG,0CA1BxI,mCAIC,MACXC,EAAiB,CACrBC,KAAM,OACNC,QAAS,UACTC,QAAS,UACTC,MAAO,SAET,iBAAOJ,EAAeb,KAAKM,aAA3B,QAAoC,SAXpB,2BAchB,MAAsB,WAAfN,KAAKkB,MAAqB,SAAW,UAd5B,2BAiBhB,uBAAiBlB,KAAKG,aAAtB,aAjBgB,+BAoBhB,MAAwB,WAAjBH,KAAKmB,YApBI,KA6BpBtB,EAAeuB,MAAQxB","file":"js/chunk-2d0ddb38.d66365b8.js","sourcesContent":["import { r as registerInstance, h } from './index-499de8b5.js';\n\nconst stylesCss = \"*{box-sizing:border-box}input,button{font-family:inherit;font-size:inherit}button{cursor:pointer;background:none;border:none}:host(.sr),:host(.sr) button{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;white-space:nowrap}.sr,.sr button{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;white-space:nowrap}.hidden{display:none}:host([hidden]){display:none}.invisible{visibility:hidden}:host{display:block;margin:1rem 0}.message-container{--symbol-size:16px;--symbol-offset:-3px;--icon-offset:-12px;--status-color:#ffffff;--status-color:var(--info-color);background-color:var(--protean-message-background-color);color:var(--protean-message-text-color);border:1px solid var(--protean-message-border-color);border-radius:2px;position:relative;margin:calc(-1 * var(--icon-offset)) calc(-1 * var(--icon-offset))\\n        calc(-1 * var(--symbol-offset));padding:var(--symbol-size) calc(-1 * var(--icon-offset))}:host([variant='inline']) .message-container{margin:0;border-color:var(--status-color)}.message-container.info{--status-color:var(--protean-status-info)}.message-container.success{--status-color:var(--protean-status-success)}.message-container.warning{--status-color:var(--protean-status-warning)}.message-container.error{--status-color:var(--protean-status-error)}.decorator{width:32px;height:32px;position:absolute;fill:var(--status-color)}.decorator.top{top:var(--symbol-offset);right:var(--symbol-offset);transform:rotate(270deg)}:host([variant='inline']) .decorator.top{top:0;right:0}.decorator.bottom{bottom:var(--symbol-offset);left:var(--symbol-offset);transform:rotate(90deg)}:host([variant='inline']) .decorator.bottom{bottom:0;left:0}protean-icon{position:absolute;top:var(--icon-offset);left:var(--icon-offset);font-weight:600;line-height:1}::slotted(ul){margin:0;padding:0.5rem 0 0.5rem 2rem}\";\n\nconst ProteanMessage = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  get computedType() {\n    const messageTypeMap = {\n      info: 'info',\n      success: 'success',\n      warning: 'warning',\n      error: 'error',\n    };\n    return messageTypeMap[this.type] ?? 'info';\n  }\n  get role() {\n    return this.level === 'status' ? 'status' : 'alert';\n  }\n  get icon() {\n    return `status-${this.computedType}-filled`;\n  }\n  get isInline() {\n    return this.variant === 'inline';\n  }\n  render() {\n    return (h(\"div\", { class: `message-container ${this.computedType}`, role: this.role }, !this.isInline && (h(\"protean-icon\", { type: this.icon })), this.renderDecorator('top'), h(\"slot\", null), this.renderDecorator('bottom')));\n  }\n  renderDecorator(cssClass) {\n    return (h(\"svg\", { class: `decorator ${cssClass}`, xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 125 125\", \"aria-hidden\": \"true\" }, h(\"path\", { d: \"M125 125V0l-16 16v94H15L0 125h125z\" })));\n  }\n};\nProteanMessage.style = stylesCss;\n\nexport { ProteanMessage as protean_message };\n"],"sourceRoot":""}