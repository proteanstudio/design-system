{"version":3,"sources":["webpack:///./src/routes/accessibility/template.html","webpack:///./src/routes/accessibility/scripts.ts","webpack:///./src/routes/accessibility/index.vue","webpack:///./src/routes/accessibility/styles.scss"],"names":["render"],"mappings":"iJAAA,46M,uBAAA,E,gBCEc,MAAO,UAA2B,Q,UCGhD,EAAOA,OAASA,EAED,gB,kCCPf,W","file":"js/chunk-6e6f6339-legacy.aed94f7a.js","sourcesContent":["<h1>Accessibility</h1>\n<p>\n    \"The Web is fundamentally designed to work for all people, whatever their\n    hardware, software, language, location, or ability. When the Web meets this\n    goal, it is accessible to people with a diverse range of hearing, movement,\n    sight, and cognitive ability.\"\n    <a\n        href=\"https://www.w3.org/standards/webdesign/accessibility\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        >- W3C</a\n    >.\n</p>\n<p>\n    We believe that all users should have access to the best possible\n    experiences and that excellent experiences can be provided with minimal\n    compromise if designed thoughtfully. Web accessibility (a11y) is a baseline\n    requirement for anything that we build; all elements are built in accordance\n    with\n    <a\n        href=\"https://w3c.github.io/silver/guidelines/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        >WCAG guidelines</a\n    >\n    up to 3.0 and the\n    <a\n        href=\"https://www.w3.org/TR/wai-aria-practices-1.2/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        >WAI-ARIA Authoring Practices</a\n    >\n    to ensure compatibility with assistive technologies. This page is by no means an exhaustive list of a11y best practices - be sure to do thorough research and testing.\n</p>\n\n<section>\n    <h2 data-in-page-anchor=\"a11y-markup\">Semantic markup</h2>\n    <p>\n        Writing semantic HTML vastly improves the accessibility of a web page.\n        Some basic best practices are:\n    </p>\n    <ul>\n        <li>\n            Maintain proper heading hierarchy.\n            <ul>\n                <li>\n                    This is useful for allowing sighted users to easily scan and\n                    gain an understanding of the page structure and gives\n                    assistive technologies landmarks to quickly navigate to.\n                </li>\n                <li>\n                    Heading levels should not be skipped, e.g., an\n                    <code>h3</code> should not immediately follow an\n                    <code>h1</code>.\n                </li>\n                <li>\n                    Further details can be found in this\n                    <a\n                        href=\"https://www.w3.org/WAI/tutorials/page-structure/headings/\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        >W3 tutorial.</a\n                    >\n                </li>\n            </ul>\n        </li>\n        <li>\n            Use structured content elements.\n            <ul>\n                <li>\n                    Use <code>header</code>, <code>main</code>,\n                    <code>nav</code>, <code>section</code>, and other similar\n                    elements. These make it easier for those using assistive\n                    technologies to navigate the page.\n                </li>\n                <li>\n                    When using a <code>section</code>, use headings within them\n                    for the benefits described above.\n                </li>\n                <li>\n                    Further details can be found in this\n                    <a\n                        href=\"https://www.w3.org/WAI/GL/WCAG3/2020/how-tos/structured-content/\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        >WCAG 3.0 support resource.</a\n                    >\n                </li>\n            </ul>\n        </li>\n        <li>\n            Be mindful of interactive element usage.\n            <ul>\n                <li>\n                    Restrict user interactions to interactive elements. Binding click\n                    interactions to a <code>div</code> element without the proper\n                    <code>aria</code> treatments can make them unreachable for some\n                    users - all interactions should be reachable via keyboard.\n                </li>\n                <li>\n                    Verify that all <code>a</code> elements have a corresponding\n                    <code>href</code>. This places the link in the tab order to allow\n                    for proper keyboard navigation.\n                </li>\n                <li>Refrain from manipulating the tab order of the page. Tab order should match the sequence of elements in the DOM and manipulating the order with <code>tabindex</code> or CSS can create a poor experience for keyboard users.</li>\n            </ul>\n        </li>\n    </ul>\n</section>\n\n<section>\n    <h2 data-in-page-anchor=\"a11y-technology\">Assistive technologies notes</h2>\n    <ul>\n        <li>When building a web page or application, be sure to test it with an assistive technology, preferably on multiple devices. \n            <ul>\n                <li>The VoiceOver Utility comes pre-installed on MacOS and iOS devices.  It works best in Safari but generally works well in other browsers also.</li>\n                <li>Similar tools are available on Android devices and Windows PCs.</li>\n            </ul>\n        </li>\n        <li>\n            Always provide alternative text for images or interactive elements\n            that do not contain text with <code>aria-label</code>s and\n            <code>alt</code> text.\n            <ul>\n                <li>\n                    Non-decorative images should always have\n                    <code>alt</code> text to be read for assistive technology\n                    users.\n                </li>\n                <li>\n                    Use an <code>aria-label</code> for:\n                    <ul>\n                        <li>\n                            items that cannot otherwise have visible text such\n                            as icon buttons.\n                        </li>\n                        <li>\n                            distinguishing regions like primary and secondary\n                            <code>nav</code> elements from one another. <code>aria-labelledby</code> should be used in the instances when there is a related, visible label on the page.\n                        </li>\n                        <li>labelling checkboxes or inputs when a visible label is not viable; do this as sparingly as possible.</li>\n                        <li>\n                            <code>aria-label</code>s for the elements are set\n                            using <code>a11y-label</code> to prevent multiple\n                            readouts and misgroupings of DOM nodes.\n                        </li>\n                    </ul>\n                    <li>\n                        Further details can be found in this\n                        <a\n                            href=\"https://www.w3.org/WAI/GL/WCAG3/2020/how-tos/text-alternatives/\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            >WCAG 3.0 support resource.</a\n                        >\n                    </li>\n                </li>\n            </ul>\n        </li>\n        <li>Decorative elements an be obfuscated from assistive technologies.\n            <ul>\n                <li>Images can be hidden using empty <code>alt</code> text or <code>role=\"presentation\"</code> for some technologies.</li>\n                <li>Other elements, e.g., inline SVGs can be hidden using <code>aria-hidden=\"true\"</code></li>\n                <li>\n                    Be sure that the image does not add any information to the page before hiding it.Further details can be found in this\n                    <a\n                        href=\"https://www.w3.org/WAI/tutorials/images/decorative/\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        >W3 tutorial.</a\n                    >\n                </li>\n            </ul>\n        </li>\n        <li>ARIA landmark roles and regions provide information to assistive technologies about intended behavior and give quick entry points to different regions of content.Using semantic markup natively provides the benefits of ARIA landmark regions, i.e., the <code>nav</code> element behaves the same was as an element that has <code>role=\"navigation\"</code>.\n        </li>\n    </ul>\n</section>\n\n<section>\n    <h2 data-in-page-anchor=\"a11y-contrast\">Color contrast</h2>\n    <p>\n        Color contrast is measured as the ratio between the relative luminance\n        of two colors. The ratios can range from 1:1 to 1:21; a full definition\n        can be found in the\n        <a\n            href=\"https://www.w3.org/TR/WCAG21/#dfn-contrast-ratio\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >WCAG 2.1 documentation.</a\n        >\n    </p>\n    <ul>\n        <li>\n            The minimum contrast ratio to meet the WCAG 2.0 AA standard for text\n            is 4.5:1. The AAA standard is 7:1.\n        </li>\n        <li>\n            The minimum contrast ratio to meet the WCAG 2.1 AA standard for\n            interaction elements such as buttons or input borders is 3:1. This\n            rule heavily influenced our decision for the\n            <code>--action-color</code> variable.\n        </li>\n        <li>\n            There are many ways to check contrast ratio. They are often\n            presented in a browser's developer tools and checkers can be found\n            on many sites such as\n            <a\n                href=\"https://webaim.org/resources/contrastchecker/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                >WebAIM.</a\n            >\n        </li>\n    </ul>\n</section>\n","import { Vue } from 'vue-class-component';\n\nexport default class AccessibilityRoute extends Vue {}\n","import { render } from \"./template.html?vue&type=template&id=740c1b80\"\nimport script from \"./scripts.ts?vue&type=script&lang=ts\"\nexport * from \"./scripts.ts?vue&type=script&lang=ts\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!./styles.scss?vue&type=style&index=0&lang=scss\""],"sourceRoot":""}